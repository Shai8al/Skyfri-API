<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Skyfri</name>
    </assembly>
    <members>
        <member name="T:Skyfri.BL.Services.PlantService">
            <summary>
            Service class handling plant-related operations.
            </summary>
        </member>
        <member name="M:Skyfri.BL.Services.PlantService.#ctor(Skyfri.Repository.IDataManager.IPlantRepository)">
            <summary>
            Constructor to initialize PlantService
            </summary>
            <param name="plantRepository">Instance of plantrepository</param>
        </member>
        <member name="M:Skyfri.BL.Services.PlantService.GetPlantsByPortfolioIdAsync(System.Guid)">
            <summary>
            Get all plants by portfolio.
            </summary>
            <param name="portfolioId">UID of the portfolio.</param>
            <returns>list of all plants.</returns>
        </member>
        <member name="M:Skyfri.BL.Services.PlantService.GetPlantsByPortfolioIdAndPlantAsync(System.Guid,System.Guid)">
            <summary>
            Get plant by portfolioId and plantId.
            </summary>
            <param name="portfolioId">UID of the portfolio.</param>
            <param name="plantId">UID of the plant.</param>
            <returns>Plant associated with the UIDs</returns>
        </member>
        <member name="M:Skyfri.BL.Services.PlantService.AddPlantAsync(Skyfri.Models.Plant)">
            <summary>
            Add a plant.
            </summary>
            <param name="plantEntity">Data for the plant</param>
            <returns>Created plant entity</returns>
        </member>
        <member name="M:Skyfri.BL.Services.PlantService.DeletePlantAsync(System.Guid)">
            <summary>
            Delete a plant
            </summary>
            <param name="plantId">UID of the plant</param>
            <returns>NA</returns>
        </member>
        <member name="T:Skyfri.BL.Services.PortfolioService">
            <summary>
            Service class handling portfolio-related operations.
            </summary>
        </member>
        <member name="M:Skyfri.BL.Services.PortfolioService.#ctor(Skyfri.Repository.IDataManager.IPortfolioRepository)">
            <summary>
            Constructor to initialize PortfolioService.
            </summary>
            <param name="portfolioRepository">The repository for portfolio operations.</param>
        </member>
        <member name="M:Skyfri.BL.Services.PortfolioService.GetPortfolioByTenantIdAsync(System.Guid)">
            <summary>
            Get all portfolios for a tenant.
            </summary>
            <param name="tenantId">UID of the tenant.</param>
            <returns>collection of portfolios.</returns>
        </member>
        <member name="M:Skyfri.BL.Services.PortfolioService.GetByTenantAndPortfolioIdAsync(System.Guid,System.Guid)">
            <summary>
            Get portfolio by tenant and portfolio ID.
            </summary>
            <param name="tenantId">UID of the tenant.</param>
            <param name="portfolioId">UID of the portfolio.</param>
            <returns>Portfolio associated with the given UIDs.</returns>
        </member>
        <member name="M:Skyfri.BL.Services.PortfolioService.GetPortfolioByIdAsync(System.Guid)">
            <summary>
            Get portfolio by its ID.
            </summary>
            <param name="portfolioId">UID of the portfolio.</param>
            <returns>portfolio associated with the given UID.</returns>
        </member>
        <member name="M:Skyfri.BL.Services.PortfolioService.AddPortfolioAsync(Skyfri.Models.Portfolio)">
            <summary>
            Add a new portfolio.
            </summary>
            <param name="portfolioEntity">The portfolio entity to be added.</param>
            <returns>The added portfolio.</returns>
        </member>
        <member name="M:Skyfri.BL.Services.PortfolioService.DeletePortfolioAsync(System.Guid)">
            <summary>
            Delete a portfolio.
            </summary>
            <param name="portfolioId">UID of the portfolio to be deleted.</param>
        </member>
        <member name="T:Skyfri.BL.Services.TenantService">
            <summary>
            Service class handling tenant-related operations.
            </summary>
        </member>
        <member name="M:Skyfri.BL.Services.TenantService.#ctor(Skyfri.Repository.IDataManager.ITenantRepository)">
            <summary>
            Constructor to initialize TenantService.
            </summary>
            <param name="tenantRepository">Instance for the tenant repository.</param>
        </member>
        <member name="M:Skyfri.BL.Services.TenantService.GetAllTenantsAsync">
            <summary>
            List of all tenants.
            </summary>
            <returns>list of all the registered tenants.</returns>
        </member>
        <member name="M:Skyfri.BL.Services.TenantService.GetTenantByIdAsync(System.Guid)">
            <summary>
            Get the tenant by tenantID
            </summary>
            <param name="tenantId">UID of the tenant</param>
            <returns>tenant associated with the UID</returns>
        </member>
        <member name="M:Skyfri.BL.Services.TenantService.AddTenantAsync(Skyfri.Models.Tenant)">
            <summary>
            Add a tenant
            </summary>
            <param name="tenantEntity">details of the tenant</param>
            <returns>the created tenant</returns>
        </member>
        <member name="M:Skyfri.BL.Services.TenantService.UpdateTenantAsync(Skyfri.Models.Tenant,Skyfri.Models.Tenant)">
            <summary>
            Update a tenant
            </summary>
            <param name="updatedTenant">updated data of the tenant</param>
            <param name="tenantEntity">exisiting data of the tenant</param>
            <returns>the updated tenant</returns>
        </member>
        <member name="M:Skyfri.BL.Services.TenantService.DeleteTenantAsync(System.Guid)">
            <summary>
            Delete a tenant
            </summary>
            <param name="tenantId">UID associated with the tenant</param>
        </member>
        <member name="T:Skyfri.Controllers.PlantController">
            <summary>
            Managed operations related to plant
            </summary>
        </member>
        <member name="M:Skyfri.Controllers.PlantController.GetAllPlantsByPortfolio(System.Guid)">
            <summary>
            Get all plants for a portfolio
            </summary>
            <param name="portfolioId">UID of the portfolio</param>
            <returns>list of all the plants for a portfolio</returns>
        </member>
        <member name="M:Skyfri.Controllers.PlantController.AddPlant(System.Guid,Skyfri.ViewModels.PlantUpdateModel)">
            <summary>
            Add a new plant for a portfolio
            </summary>
            <param name="portfolioId">UID of the portfolio</param>
            <param name="plantModel">data for the plant</param>
            <returns>newly created plant data</returns>
        </member>
        <member name="M:Skyfri.Controllers.PlantController.DeletePlant(System.Guid,System.Guid)">
            <summary>
            Delete a plant for a portfolio
            </summary>
            <param name="plantId">UID of the plant</param>
            <param name="portfolioId">UID of the portfolio</param>
            <returns>NA</returns>
        </member>
        <member name="T:Skyfri.Controllers.PortfolioController">
            <summary>
            Managed operations related to portfolio
            </summary>
        </member>
        <member name="M:Skyfri.Controllers.PortfolioController.GetAllPortfoliosForTenant(System.Guid)">
            <summary>
            Get all the portfolios for a tenant
            </summary>
            <param name="tenantId"></param>
            <returns>List of portfolios</returns>
        </member>
        <member name="M:Skyfri.Controllers.PortfolioController.AddPortfolio(Skyfri.ViewModels.PortfolioUpdateModel,System.Guid)">
            <summary>
            Add a new portfolio for a tenant
            </summary>
            <param name="portfolioModel">Details of the portfolio</param>
            <param name="tenantId"></param>
            <returns>newly created portfolio data</returns>
        </member>
        <member name="M:Skyfri.Controllers.PortfolioController.DeletePortfolio(System.Guid,System.Guid)">
            <summary>
            Delete a portfolio for a tenant
            </summary>
            <param name="tenantId">UID of the tenant</param>
            <param name="portfolioId">UID of the portfolio</param>
            <returns></returns>
        </member>
        <member name="T:Skyfri.Controllers.TenantController">
            <summary>
            Manage operations related to tenant
            </summary>
        </member>
        <member name="M:Skyfri.Controllers.TenantController.GetAllTenants">
            <summary>
            Get all the tenants listed
            </summary>
            <returns>List of tenants</returns>
        </member>
        <member name="M:Skyfri.Controllers.TenantController.GetTenantById(System.Guid)">
            <summary>
            Get a specific tenant data
            </summary>
            <param name="tenantId">UID of the tenant</param>
            <returns>Data of the specific tenant</returns>
        </member>
        <member name="M:Skyfri.Controllers.TenantController.AddTenant(Skyfri.ViewModels.TenantUpdateModel)">
            <summary>
            Add a tenant
            </summary>
            <param name="tenantModel">Details of the tenant</param>
            <returns>newly created tenant data</returns>
        </member>
        <member name="M:Skyfri.Controllers.TenantController.EditTenant(System.Guid,Skyfri.ViewModels.TenantUpdateModel)">
            <summary>
            Edit an existing tenant data
            </summary>
            <param name="tenantId">UID of the tenant</param>
            <param name="tenantViewModel">Updated data for the tenant</param>
            <returns>updated tenant data</returns>
        </member>
        <member name="M:Skyfri.Controllers.TenantController.DeleteTenant(System.Guid)">
            <summary>
            Deletes a tenant
            </summary>
            <param name="tenantId">UID of the tenant to be deleted</param>
            <returns>NA</returns>
        </member>
        <member name="T:Skyfri.data_access.migrations.initial">
            <inheritdoc />
        </member>
        <member name="M:Skyfri.data_access.migrations.initial.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Skyfri.data_access.migrations.initial.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Skyfri.data_access.migrations.initial.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Skyfri.Repository.DataManager.PlantManager">
            <summary>
            Provides data access operations for Plants.
            </summary>
        </member>
        <member name="M:Skyfri.Repository.DataManager.PlantManager.#ctor(Skyfri.data_access.SkyfriDbContext)">
            <summary>
            Constructor to initialize PlantManager.
            </summary>
            <param name="skyfriDbContext">Instance for skyfriDbContext.</param>
        </member>
        <member name="M:Skyfri.Repository.DataManager.PlantManager.GetPlantsByPortfolioIdAsync(System.Guid)">
            <summary>
            List of Plants.
            </summary>
            <param name="portfolioId">UID of the portfolio.</param>
            <returns>List of plants associated with the portfolio.</returns>
        </member>
        <member name="M:Skyfri.Repository.DataManager.PlantManager.GetPlantByPlantIdAsync(System.Guid)">
            <summary>
            Get plant by plant id.
            </summary>
            <param name="plantId">UID of the plant.</param>
            <returns>Plant data associated with the plantId.</returns>
        </member>
        <member name="M:Skyfri.Repository.DataManager.PlantManager.AddPlantAsync(Skyfri.Models.Plant)">
            <summary>
            Add a plant.
            </summary>
            <param name="plantEntity">Details of the plant.</param>
            <returns>Created plant data.</returns>
        </member>
        <member name="M:Skyfri.Repository.DataManager.PlantManager.DeletePlantAsync(Skyfri.Models.Plant)">
            <summary>
            Delete a plant.
            </summary>
            <param name="plantEntity">Details of the plant.</param>
        </member>
        <member name="T:Skyfri.Repository.DataManager.PortfolioManager">
            <summary>
            Provides data access operations for Portfolio.
            </summary>
        </member>
        <member name="M:Skyfri.Repository.DataManager.PortfolioManager.#ctor(Skyfri.data_access.SkyfriDbContext)">
            <summary>
            Constructor to initialize PortfolioManager.
            </summary>
            <param name="skyfriDbContext">Instance for skyfriDbContext.</param>
        </member>
        <member name="M:Skyfri.Repository.DataManager.PortfolioManager.GetPortfolioByTenantIdAsync(System.Guid)">
            <summary>
            Get list of Portfolios.
            </summary>
            <param name="tenantId">UID of the tenant.</param>
            <returns>List of all the portfolios associated with the tenant.</returns>
        </member>
        <member name="M:Skyfri.Repository.DataManager.PortfolioManager.GetPortfolioByPortfolioIdAsync(System.Guid)">
            <summary>
            Get portfolio by portfolio id.
            </summary>
            <param name="portfolioId">UID of the portfolio.</param>
            <returns>Portfolio data associated with the portfolio id.</returns>
        </member>
        <member name="M:Skyfri.Repository.DataManager.PortfolioManager.AddPortfolioAsync(Skyfri.Models.Portfolio)">
            <summary>
            Add a portfolio.
            </summary>
            <param name="portfolioEntity">Details of the portfolio.</param>
            <returns>Added portfolio data.</returns>
        </member>
        <member name="M:Skyfri.Repository.DataManager.PortfolioManager.DeletePortfolioAsync(Skyfri.Models.Portfolio)">
            <summary>
            Delete aportfolio.
            </summary>
            <param name="portfolioEntity">Details of the portfolio</param>
        </member>
        <member name="T:Skyfri.Repository.DataManager.TenantManager">
            <summary>
            Provides data access operations for Tenant.
            </summary>
        </member>
        <member name="M:Skyfri.Repository.DataManager.TenantManager.#ctor(Skyfri.data_access.SkyfriDbContext)">
            <summary>
            Constructor to initialize TenantManager.
            </summary>
            <param name="skyfriDbContext">Instance for skyfriDbContext.</param>
        </member>
        <member name="M:Skyfri.Repository.DataManager.TenantManager.GetAllTenantsAsync">
            <summary>
            Get list of all Tenants.
            </summary>
            <returns>List of all the tenants</returns>
        </member>
        <member name="M:Skyfri.Repository.DataManager.TenantManager.GetTenantByIdAsync(System.Guid)">
            <summary>
            Get tenant by tenant id.
            </summary>
            <param name="tenantId">UID of the tenant.</param>
            <returns>Tenant data associated with the tenantId.</returns>
        </member>
        <member name="M:Skyfri.Repository.DataManager.TenantManager.AddTenantAsync(Skyfri.Models.Tenant)">
            <summary>
            Adding a tenant.
            </summary>
            <param name="tenantEntity">Details of the tenant.</param>
            <returns>Added tenant data.</returns>
        </member>
        <member name="M:Skyfri.Repository.DataManager.TenantManager.UpdateTenantAsync(Skyfri.Models.Tenant)">
            <summary>
            Updated tenant details
            </summary>
            <param name="newTenantEntity">New tenant details.</param>
            <returns>Updated tenant data.</returns>
        </member>
        <member name="M:Skyfri.Repository.DataManager.TenantManager.DeleteTenantAsync(Skyfri.Models.Tenant)">
            <summary>
            Delete a tenant.
            </summary>
            <param name="tenantEntity">Details of the tenant.</param>
        </member>
        <member name="T:Skyfri.ViewModels.PlantViewModel">
            <summary>
            View model for Plant entity
            </summary>
        </member>
        <member name="P:Skyfri.ViewModels.PlantViewModel.PlantId">
            <summary>
            Id of the Plant
            </summary>
        </member>
        <member name="P:Skyfri.ViewModels.PlantViewModel.PortfolioId">
            <summary>
            UID for the portfolio in which the plant is registered
            </summary>
        </member>
        <member name="P:Skyfri.ViewModels.PlantViewModel.PlantName">
            <summary>
            Name of the plant
            </summary>
        </member>
        <member name="T:Skyfri.ViewModels.PlantUpdateModel">
            <summary>
            Update model for Plant entity
            </summary>
        </member>
        <member name="P:Skyfri.ViewModels.PlantUpdateModel.PlantId">
            <summary>
            Id of the Plant
            </summary>
        </member>
        <member name="P:Skyfri.ViewModels.PlantUpdateModel.PortfolioId">
            <summary>
            UID for the portfolio in which the plant is registered
            </summary>
        </member>
        <member name="T:Skyfri.ViewModels.PortfolioViewModel">
            <summary>
            View model for Entity
            </summary>
        </member>
        <member name="P:Skyfri.ViewModels.PortfolioViewModel.PortfolioId">
            <summary>
            Id of the Portfolio
            </summary>
        </member>
        <member name="P:Skyfri.ViewModels.PortfolioViewModel.TenantId">
            <summary>
            tenant UID for the portfolio
            </summary>
        </member>
        <member name="P:Skyfri.ViewModels.PortfolioViewModel.PortfolioName">
            <summary>
            Name of the portfolio
            </summary>
        </member>
        <member name="T:Skyfri.ViewModels.PortfolioUpdateModel">
            <summary>
            Update model for portfolio entity
            </summary>
        </member>
        <member name="P:Skyfri.ViewModels.PortfolioUpdateModel.PortfolioId">
            <summary>
            Id of the Tenant
            </summary>
        </member>
        <member name="P:Skyfri.ViewModels.PortfolioUpdateModel.TenantId">
            <summary>
            tenant UID for the portfolio
            </summary>
        </member>
        <member name="T:Skyfri.ViewModels.TenantViewModel">
            <summary>
            View model for tenant entity
            </summary>
        </member>
        <member name="P:Skyfri.ViewModels.TenantViewModel.TenantId">
            <summary>
            Id of the Tenant
            </summary>
        </member>
        <member name="P:Skyfri.ViewModels.TenantViewModel.TenantName">
            <summary>
            Name of the tenant
            </summary>
        </member>
        <member name="P:Skyfri.ViewModels.TenantViewModel.TenantCountry">
            <summary>
            Country where the tenant is based at
            </summary>
        </member>
        <member name="T:Skyfri.ViewModels.TenantUpdateModel">
            <summary>
            Update model for tenant entity
            </summary>
        </member>
        <member name="P:Skyfri.ViewModels.TenantUpdateModel.TenantId">
            <summary>
            Id of the Tenant
            </summary>
        </member>
    </members>
</doc>
